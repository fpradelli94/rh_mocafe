#!/usr/bin/python3
"""
Plot number of tip cells for simulation.
"""
import json
import argparse
import numpy as np
import matplotlib.pyplot as plt


def parse_cli_args():
    parser = argparse.ArgumentParser(
        prog="tipcells-in-time",
        description="Plot Tip Cells in time given a incremental_tipcells,json"
    )

    parser.add_argument("jsonfile",
                        help="File containing the number of Tip Cells in time for the simulation (usually called "
                             "incremental_tipcells.json).")
    parser.add_argument("output_png",
                        help="PNG to store plot")
    parser.add_argument("--append", action='extend',
                        help="Append other json files to the main one.")

    return parser.parse_args()


def moving_average(a: np.ndarray, n: int = 3) -> np.ndarray:
    """
    Compute the moving average of the given array
    """
    ret = np.cumsum(a, dtype=float)
    ret[n:] = ret[n:] - ret[:-n]
    return ret[n - 1:] / n


def main():
    args = parse_cli_args()

    # load json file
    with open(args.jsonfile, "r") as infile:
        tip_cells_in_time = json.load(infile)

    # append possible additional file
    if args.append is not None:
        steps = tip_cells_in_time.keys()
        for json_file in args.append:
            # open json file
            with open(json_file, "r") as infile:
                tip_cells_to_append = json.load(infile)
            # check if there are common elements
            keys_intersection = set(tip_cells_to_append.keys()) & set(steps)
            assert len(keys_intersection) < 2, f"Found common keys = {keys_intersection}. Files are incompatible"
            # if not incompatible, append
            tip_cells_in_time.update(tip_cells_to_append)

    # plot results
    # get n_steps
    n_steps = len(tip_cells_in_time)

    # init arrays
    steps = np.zeros(n_steps)
    n_tc = np.zeros(n_steps)

    # get arrays
    for i, key in enumerate(tip_cells_in_time.keys()):
        steps[i] = float(key.replace("step_", ""))
        n_tc[i] = len(tip_cells_in_time[key])

    # compute moving average for the number of activated tipcells
    window_size = 51
    moving_average_n_tc = moving_average(n_tc, n=window_size)

    # plot
    plt.plot(steps, n_tc, linewidth=1, alpha=0.3, label="Instant TC number", color="tab:blue")
    plt.plot(steps[int(np.floor(window_size / 2)):-int(np.floor(window_size / 2))], moving_average_n_tc,
             linewidth=3, color="tab:blue", label=f"Moving average (window size={window_size})")
    plt.xlabel("steps", fontsize=20)
    plt.legend()

    # adjust
    figure = plt.gcf()
    figure.set_size_inches(6, 6)
    plt.tight_layout()
    plt.savefig(args.output_png)


if __name__ == "__main__":
    main()
